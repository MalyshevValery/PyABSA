:py:mod:`pyabsa.functional.config`
==================================

.. py:module:: pyabsa.functional.config


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   apc_config_manager/index.rst
   atepc_config_manager/index.rst
   config_manager/index.rst
   tad_config_manager/index.rst
   tc_config_manager/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   pyabsa.functional.config.APCConfigManager
   pyabsa.functional.config.ATEPCConfigManager
   pyabsa.functional.config.TCConfigManager
   pyabsa.functional.config.TADConfigManager




.. py:class:: APCConfigManager(args, **kwargs)

   Bases: :py:obj:`pyabsa.functional.config.config_manager.ConfigManager`

   Simple object for storing attributes.

   Implements equality by attribute names and values, and provides a simple
   string representation.

   .. py:method:: set_apc_config(configType: str, newitem: dict)
      :staticmethod:


   .. py:method:: set_apc_config_template(newitem)
      :staticmethod:


   .. py:method:: set_apc_config_base(newitem)
      :staticmethod:


   .. py:method:: set_apc_config_english(newitem)
      :staticmethod:


   .. py:method:: set_apc_config_chinese(newitem)
      :staticmethod:


   .. py:method:: set_apc_config_multilingual(newitem)
      :staticmethod:


   .. py:method:: set_apc_config_glove(newitem)
      :staticmethod:


   .. py:method:: set_apc_config_bert_baseline(newitem)
      :staticmethod:


   .. py:method:: get_apc_config_template() -> pyabsa.functional.config.config_manager.ConfigManager
      :staticmethod:


   .. py:method:: get_apc_config_base() -> pyabsa.functional.config.config_manager.ConfigManager
      :staticmethod:


   .. py:method:: get_apc_config_english() -> pyabsa.functional.config.config_manager.ConfigManager
      :staticmethod:


   .. py:method:: get_apc_config_chinese() -> pyabsa.functional.config.config_manager.ConfigManager
      :staticmethod:


   .. py:method:: get_apc_config_multilingual() -> pyabsa.functional.config.config_manager.ConfigManager
      :staticmethod:


   .. py:method:: get_apc_config_glove() -> pyabsa.functional.config.config_manager.ConfigManager
      :staticmethod:


   .. py:method:: get_apc_config_bert_baseline() -> pyabsa.functional.config.config_manager.ConfigManager
      :staticmethod:



.. py:class:: ATEPCConfigManager(args, **kwargs)

   Bases: :py:obj:`pyabsa.functional.config.config_manager.ConfigManager`

   Simple object for storing attributes.

   Implements equality by attribute names and values, and provides a simple
   string representation.

   .. py:method:: set_atepc_config(configType: str, newitem: dict)
      :staticmethod:


   .. py:method:: set_atepc_config_template(newitem)
      :staticmethod:


   .. py:method:: set_atepc_config_base(newitem)
      :staticmethod:


   .. py:method:: set_atepc_config_english(newitem)
      :staticmethod:


   .. py:method:: set_atepc_config_chinese(newitem)
      :staticmethod:


   .. py:method:: set_atepc_config_multilingual(newitem)
      :staticmethod:


   .. py:method:: get_atepc_config_template() -> pyabsa.functional.config.config_manager.ConfigManager
      :staticmethod:


   .. py:method:: get_atepc_config_base() -> pyabsa.functional.config.config_manager.ConfigManager
      :staticmethod:


   .. py:method:: get_atepc_config_english() -> pyabsa.functional.config.config_manager.ConfigManager
      :staticmethod:


   .. py:method:: get_atepc_config_chinese() -> pyabsa.functional.config.config_manager.ConfigManager
      :staticmethod:


   .. py:method:: get_atepc_config_multilingual() -> pyabsa.functional.config.config_manager.ConfigManager
      :staticmethod:



.. py:class:: TCConfigManager(args, **kwargs)

   Bases: :py:obj:`pyabsa.functional.config.config_manager.ConfigManager`

   Simple object for storing attributes.

   Implements equality by attribute names and values, and provides a simple
   string representation.

   .. py:method:: set_tc_config(configType: str, newitem: dict)
      :staticmethod:


   .. py:method:: set_tc_config_template(newitem)
      :staticmethod:


   .. py:method:: set_tc_config_base(newitem)
      :staticmethod:


   .. py:method:: set_tc_config_english(newitem)
      :staticmethod:


   .. py:method:: set_tc_config_chinese(newitem)
      :staticmethod:


   .. py:method:: set_tc_config_multilingual(newitem)
      :staticmethod:


   .. py:method:: set_tc_config_glove(newitem)
      :staticmethod:


   .. py:method:: get_tc_config_template() -> pyabsa.functional.config.config_manager.ConfigManager
      :staticmethod:


   .. py:method:: get_tc_config_base() -> pyabsa.functional.config.config_manager.ConfigManager
      :staticmethod:


   .. py:method:: get_tc_config_english() -> pyabsa.functional.config.config_manager.ConfigManager
      :staticmethod:


   .. py:method:: get_tc_config_chinese() -> pyabsa.functional.config.config_manager.ConfigManager
      :staticmethod:


   .. py:method:: get_tc_config_multilingual() -> pyabsa.functional.config.config_manager.ConfigManager
      :staticmethod:


   .. py:method:: get_tc_config_glove() -> pyabsa.functional.config.config_manager.ConfigManager
      :staticmethod:


   .. py:method:: set_classification_config_template(newitem)
      :staticmethod:


   .. py:method:: set_classification_config_base(newitem)
      :staticmethod:


   .. py:method:: set_classification_config_english(newitem)
      :staticmethod:


   .. py:method:: set_classification_config_chinese(newitem)
      :staticmethod:


   .. py:method:: set_classification_config_multilingual(newitem)
      :staticmethod:


   .. py:method:: set_classification_config_glove(newitem)
      :staticmethod:


   .. py:method:: get_classification_config_template() -> pyabsa.functional.config.config_manager.ConfigManager
      :staticmethod:


   .. py:method:: get_classification_config_base() -> pyabsa.functional.config.config_manager.ConfigManager
      :staticmethod:


   .. py:method:: get_classification_config_english() -> pyabsa.functional.config.config_manager.ConfigManager
      :staticmethod:


   .. py:method:: get_classification_config_chinese() -> pyabsa.functional.config.config_manager.ConfigManager
      :staticmethod:


   .. py:method:: get_classification_config_multilingual() -> pyabsa.functional.config.config_manager.ConfigManager
      :staticmethod:


   .. py:method:: get_classification_config_glove() -> pyabsa.functional.config.config_manager.ConfigManager
      :staticmethod:



.. py:class:: TADConfigManager(args, **kwargs)

   Bases: :py:obj:`pyabsa.functional.config.config_manager.ConfigManager`

   Simple object for storing attributes.

   Implements equality by attribute names and values, and provides a simple
   string representation.

   .. py:method:: set_tad_config(configType: str, newitem: dict)
      :staticmethod:


   .. py:method:: set_tad_config_template(newitem)
      :staticmethod:


   .. py:method:: set_tad_config_base(newitem)
      :staticmethod:


   .. py:method:: set_tad_config_english(newitem)
      :staticmethod:


   .. py:method:: set_tad_config_chinese(newitem)
      :staticmethod:


   .. py:method:: set_tad_config_multilingual(newitem)
      :staticmethod:


   .. py:method:: set_tad_config_glove(newitem)
      :staticmethod:


   .. py:method:: get_tad_config_template() -> pyabsa.functional.config.config_manager.ConfigManager
      :staticmethod:


   .. py:method:: get_tad_config_base() -> pyabsa.functional.config.config_manager.ConfigManager
      :staticmethod:


   .. py:method:: get_tad_config_english() -> pyabsa.functional.config.config_manager.ConfigManager
      :staticmethod:


   .. py:method:: get_tad_config_chinese() -> pyabsa.functional.config.config_manager.ConfigManager
      :staticmethod:


   .. py:method:: get_tad_config_multilingual() -> pyabsa.functional.config.config_manager.ConfigManager
      :staticmethod:


   .. py:method:: get_tad_config_glove() -> pyabsa.functional.config.config_manager.ConfigManager
      :staticmethod:



