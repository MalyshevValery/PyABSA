:py:mod:`pyabsa.functional.checkpoint`
======================================

.. py:module:: pyabsa.functional.checkpoint


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   checkpoint_manager/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   pyabsa.functional.checkpoint.APCCheckpointManager
   pyabsa.functional.checkpoint.ATEPCCheckpointManager
   pyabsa.functional.checkpoint.TCCheckpointManager
   pyabsa.functional.checkpoint.TADCheckpointManager




.. py:class:: APCCheckpointManager

   Bases: :py:obj:`CheckpointManager`

   .. py:method:: get_sentiment_classifier(checkpoint: str = None, **kwargs)
      :staticmethod:

      :param checkpoint: zipped checkpoint name, or checkpoint path or checkpoint name queried from Google Drive
      This param is for someone wants to load a checkpoint not registered in PyABSA
      :param auto_device: True or False, otherwise 'cuda', 'cpu' works
      :param eval_batch_size: eval batch_size in modeling

      :return:


   .. py:method:: get_checkpoint(checkpoint: str = 'Chinese')
      :staticmethod:

      download the checkpoint and return the path of the downloaded checkpoint
      :param checkpoint: zipped checkpoint name, or checkpoint path or checkpoint name queried from Google Drive
      This param is for someone wants to load a checkpoint not registered in PyABSA
      :return:



.. py:class:: ATEPCCheckpointManager

   Bases: :py:obj:`CheckpointManager`

   .. py:method:: get_aspect_extractor(checkpoint: str = None, **kwargs)
      :staticmethod:

      :param checkpoint: zipped checkpoint name, or checkpoint path or checkpoint name queried from Google Drive
      This param is for someone wants to load a checkpoint not registered in PyABSA
      :return:


   .. py:method:: get_checkpoint(checkpoint: str = 'Chinese')
      :staticmethod:

      download the checkpoint and return the path of the downloaded checkpoint
      :param checkpoint: zipped checkpoint name, or checkpoint path or checkpoint name queried from Google Drive
      This param is for someone wants to load a checkpoint not registered in PyABSA
      :return:



.. py:class:: TCCheckpointManager

   Bases: :py:obj:`CheckpointManager`

   .. py:method:: get_text_classifier(checkpoint: str = None, **kwargs)
      :staticmethod:

      :param checkpoint: zipped checkpoint name, or checkpoint path or checkpoint name queried from Google Drive
      This param is for someone wants to load a checkpoint not registered in PyABSA
      :param auto_device: True or False, otherwise 'cuda', 'cpu' works
      :param eval_batch_size: eval batch_size in modeling

      :return:


   .. py:method:: get_checkpoint(checkpoint: str = 'Chinese')
      :staticmethod:

      download the checkpoint and return the path of the downloaded checkpoint
      :param checkpoint: zipped checkpoint name, or checkpoint path or checkpoint name queried from Google Drive
      This param is for someone wants to load a checkpoint not registered in PyABSA
      :return:



.. py:class:: TADCheckpointManager

   Bases: :py:obj:`CheckpointManager`

   .. py:method:: get_tad_text_classifier(checkpoint: str = None, eval_batch_size=128, **kwargs)
      :staticmethod:

      :param checkpoint: zipped checkpoint name, or checkpoint path or checkpoint name queried from Google Drive
      This param is for someone wants to load a checkpoint not registered in PyABSA
      :param auto_device: True or False, otherwise 'cuda', 'cpu' works
      :param eval_batch_size: eval batch_size in modeling

      :return:


   .. py:method:: get_checkpoint(checkpoint: str = 'Chinese')
      :staticmethod:

      download the checkpoint and return the path of the downloaded checkpoint
      :param checkpoint: zipped checkpoint name, or checkpoint path or checkpoint name queried from Google Drive
      This param is for someone wants to load a checkpoint not registered in PyABSA
      :return:



