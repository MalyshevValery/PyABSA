:py:mod:`pyabsa.core.apc.classic.__bert__.layers.attention`
===========================================================

.. py:module:: pyabsa.core.apc.classic.__bert__.layers.attention


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pyabsa.core.apc.classic.__bert__.layers.attention.Attention
   pyabsa.core.apc.classic.__bert__.layers.attention.NoQueryAttention




.. py:class:: Attention(embed_dim, hidden_dim=None, out_dim=None, n_head=1, score_function='dot_product', dropout=0)

   Bases: :py:obj:`torch.nn.Module`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: reset_parameters()


   .. py:method:: forward(k, q)



.. py:class:: NoQueryAttention(embed_dim, hidden_dim=None, out_dim=None, n_head=1, score_function='dot_product', q_len=1, dropout=0)

   Bases: :py:obj:`Attention`

   q is a parameter

   .. py:method:: reset_q()


   .. py:method:: forward(k, **kwargs)



