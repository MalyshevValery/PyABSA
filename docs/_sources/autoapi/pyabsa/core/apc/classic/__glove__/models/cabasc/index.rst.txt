:py:mod:`pyabsa.core.apc.classic.__glove__.models.cabasc`
=========================================================

.. py:module:: pyabsa.core.apc.classic.__glove__.models.cabasc


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pyabsa.core.apc.classic.__glove__.models.cabasc.Cabasc




.. py:class:: Cabasc(embedding_matrix, opt, _type='c')

   Bases: :py:obj:`torch.nn.Module`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:attribute:: inputs
      :annotation: = ['text_indices', 'aspect_indices', 'left_with_aspect_indices', 'right_with_aspect_indices']

      

   .. py:method:: context_attention(x_l, x_r, memory, memory_len, aspect_len)


   .. py:method:: locationed_memory(memory, memory_len)

      # differ from description in paper here, but may be better
      for i in range(memory.size(0)):
          for idx in range(memory_len[i]):
              aspect_start = left_len[i] - aspect_len[i]
              aspect_end = left_len[i]
              if idx < aspect_start: l = aspect_start.item() - idx
              elif idx <= aspect_end: l = 0
              else: l = idx - aspect_end.item()
              memory[i][idx] *= (1-float(l)/int(memory_len[i]))


   .. py:method:: forward(inputs)



