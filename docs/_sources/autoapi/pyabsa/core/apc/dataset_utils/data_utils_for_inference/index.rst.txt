:py:mod:`pyabsa.core.apc.dataset_utils.data_utils_for_inference`
================================================================

.. py:module:: pyabsa.core.apc.dataset_utils.data_utils_for_inference


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pyabsa.core.apc.dataset_utils.data_utils_for_inference.ABSADataset




.. py:class:: ABSADataset(tokenizer, opt)

   Bases: :py:obj:`torch.utils.data.Dataset`

   An abstract class representing a :class:`Dataset`.

   All datasets that represent a map from keys to data samples should subclass
   it. All subclasses should overwrite :meth:`__getitem__`, supporting fetching a
   data sample for a given key. Subclasses could also optionally overwrite
   :meth:`__len__`, which is expected to return the size of the dataset by many
   :class:`~torch.utils.data.Sampler` implementations and the default options
   of :class:`~torch.utils.data.DataLoader`.

   .. note::
     :class:`~torch.utils.data.DataLoader` by default constructs a index
     sampler that yields integral indices.  To make it work with a map-style
     dataset with non-integral indices/keys, a custom sampler must be provided.

   .. py:method:: parse_sample(text)


   .. py:method:: prepare_infer_sample(text: str, ignore_error=True)


   .. py:method:: prepare_infer_dataset(infer_file, ignore_error)


   .. py:method:: process_data(samples, ignore_error=True)


   .. py:method:: __getitem__(index)


   .. py:method:: __len__()



