:py:mod:`pyabsa.core.tad.classic.__glove__.dataset_utils.data_utils_for_training`
=================================================================================

.. py:module:: pyabsa.core.tad.classic.__glove__.dataset_utils.data_utils_for_training


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pyabsa.core.tad.classic.__glove__.dataset_utils.data_utils_for_training.Tokenizer
   pyabsa.core.tad.classic.__glove__.dataset_utils.data_utils_for_training.GloVeTADDataset



Functions
~~~~~~~~~

.. autoapisummary::

   pyabsa.core.tad.classic.__glove__.dataset_utils.data_utils_for_training.build_tokenizer
   pyabsa.core.tad.classic.__glove__.dataset_utils.data_utils_for_training.check_and_fix_adv_train_labels
   pyabsa.core.tad.classic.__glove__.dataset_utils.data_utils_for_training.check_and_fix_is_adv_labels



.. py:function:: build_tokenizer(dataset_list, max_seq_len, dat_fname, opt)


.. py:class:: Tokenizer(max_seq_len, lower=True)

   Bases: :py:obj:`object`

   .. py:method:: fit_on_text(text)


   .. py:method:: text_to_sequence(text, reverse=False, padding='post', truncating='post')



.. py:class:: GloVeTADDataset(dataset_list, tokenizer, opt)

   Bases: :py:obj:`torch.utils.data.Dataset`

   An abstract class representing a :class:`Dataset`.

   All datasets that represent a map from keys to data samples should subclass
   it. All subclasses should overwrite :meth:`__getitem__`, supporting fetching a
   data sample for a given key. Subclasses could also optionally overwrite
   :meth:`__len__`, which is expected to return the size of the dataset by many
   :class:`~torch.utils.data.Sampler` implementations and the default options
   of :class:`~torch.utils.data.DataLoader`.

   .. note::
     :class:`~torch.utils.data.DataLoader` by default constructs a index
     sampler that yields integral indices.  To make it work with a map-style
     dataset with non-integral indices/keys, a custom sampler must be provided.

   .. py:attribute:: glove_input_colses
      

      

   .. py:method:: __getitem__(index)


   .. py:method:: __len__()



.. py:function:: check_and_fix_adv_train_labels(label_set: set, label_name, all_data, opt)


.. py:function:: check_and_fix_is_adv_labels(label_set: set, label_name, all_data, opt)


